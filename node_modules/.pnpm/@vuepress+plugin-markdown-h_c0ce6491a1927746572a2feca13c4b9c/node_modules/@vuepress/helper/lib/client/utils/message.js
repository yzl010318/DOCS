import { keys } from '../../shared/index.js';
const containerId = 'message-container';
export class Message {
    elements;
    constructor() {
        this.elements = {};
    }
    static get containerElement() {
        let containerElement = document.getElementById(containerId);
        if (containerElement)
            return containerElement;
        containerElement = document.createElement('div');
        containerElement.id = containerId;
        document.body.appendChild(containerElement);
        return containerElement;
    }
    getElement(messageId) {
        return this.elements[messageId];
    }
    pop(html, duration = 2000, clickToClose = true) {
        const messageId = Date.now();
        const messageElement = document.createElement('div');
        messageElement.className = 'message-item move-in';
        messageElement.innerHTML = html;
        Message.containerElement.appendChild(messageElement);
        this.elements[messageId] = messageElement;
        if (clickToClose)
            messageElement.addEventListener('click', () => {
                this.close(messageId);
            });
        if (duration > 0)
            setTimeout(() => {
                this.close(messageId);
            }, duration);
        return messageId;
    }
    close(messageId) {
        if (messageId) {
            const messageElement = this.elements[messageId];
            messageElement.classList.remove('move-in');
            messageElement.classList.add('move-out');
            messageElement.addEventListener('animationend', () => {
                messageElement.remove();
                delete this.elements[messageId];
            });
        }
        else {
            keys(this.elements).forEach((id) => {
                this.close(Number(id));
            });
        }
    }
    destroy() {
        const containerElement = document.getElementById(containerId);
        if (containerElement)
            document.body.removeChild(containerElement);
        this.elements = {};
    }
}
