import{dedent as S}from"@mdit/helper";const v=(p,{name:i,open:m,close:b,render:h}={name:"uml",open:"start",close:"end",render:(o,l)=>{const f=o[l],{content:e,info:r,type:u}=f;return`<div class="${u}" title="${r}">${e}</div>`}})=>{const o=`@${m}`,l=`@${b}`,f=(e,r,u,$)=>{let s=e.bMarks[r]+e.tShift[r],a=e.eMarks[r];if(e.src.charAt(s)!=="@")return!1;let t;for(t=0;t<o.length;++t)if(o[t]!==e.src[s+t])return!1;const g=e.src.slice(s,s+t),M=e.src.slice(s+t,a);if($)return!0;let k=!1,n=r;for(;n<u&&(s=e.bMarks[n]+e.tShift[n],a=e.eMarks[n],!(s<a&&e.sCount[n]<e.blkIndent));){if(e.src.charAt(s)==="@"&&e.sCount[n]<=e.sCount[r]){let d=!0;for(t=0;t<l.length;++t)if(l[t]!==e.src[s+t]){d=!1;break}if(d&&e.skipSpaces(s+t)>=a){k=!0;break}}n++}const C=e.src.split(`
`).slice(r+1,n).join(`
`),c=e.push(i,"uml",0);return c.block=!0,c.info=M,c.content=S(C),c.map=[r,n],c.markup=g,e.line=n+(k?1:0),!0};p.block.ruler.before("fence",i,f,{alt:["paragraph","reference","blockquote","list"]}),p.renderer.rules[i]=h};export{v as uml};
//# sourceMappingURL=index.js.map
