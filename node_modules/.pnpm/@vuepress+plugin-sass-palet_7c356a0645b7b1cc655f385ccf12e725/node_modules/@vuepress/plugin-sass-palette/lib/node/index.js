import{Logger as L,getBundlerName as M,mergeViteConfig as N,isFunction as I,isString as b,addViteConfig as B,chainWebpack as R}from"@vuepress/helper";import{watch as w}from"chokidar";import{path as D,fs as V,getDirname as C}from"vuepress/utils";const W=import.meta.dirname||C(import.meta.url),x=D.resolve(W,"../../styles/empty.scss"),k="@vuepress/plugin-sass-palette",v=new L(k),f=a=>V.pathExistsSync(a)?a:x,i=a=>a?`${a}-`:"",_=(a,e,s)=>{const l=M(e),r=`${i(s)}config`,h=`@use "@sass-palette/${i(s)}config";`,g=new RegExp(`@use\\s+(["'])@sass-palette\\/${i(s)}config\\1;`),$=`${i(s)}palette`,d=`@use "@sass-palette/${i(s)}palette";`,u=new RegExp(`@use\\s+(["'])@sass-palette\\/${i(s)}palette\\1;`);if(l==="vite"){const p=a,n=p.viteOptions?.css?.preprocessorOptions?.scss?.additionalData;p.viteOptions=N(p.viteOptions??{},{css:{preprocessorOptions:{scss:{charset:!1,additionalData:async(o,c)=>{let t=o;if(I(n)){const m=await n(o,c);t=b(m)?m:m.content}else b(n)&&(t=`${n}${o}`);return t.includes(r)&&!t.match(g)&&(t=`${h}
${t}`),t.includes($)&&!t.match(u)&&(t=`${d}
${t}`),t}}}}})}else if(l==="webpack"){const p=a;p.scss??={};const{additionalData:n}=p.scss;p.scss.additionalData=(o,c)=>{let t=b(n)?`${n}${o}`:I(n)?n(o,c):o;return t.includes(r)&&!t.match(g)&&(t=`${h}
${t}`),t.includes($)&&!t.match(u)&&(t=`${d}
${t}`),t}}},z=(a,e)=>a.writeTemp(`sass-palette/load-${e||"default"}.js`,`import "@sass-palette/${i(e)}inject";
`),S=(a,e,s,l)=>a.writeTemp(`sass-palette/${i(e)}config.scss`,`@import "file:///${f(s)}";
@import "file:///${f(l)}";
`),G=(a,e)=>a.writeTemp(`sass-palette/${i(e)}inject.scss`,`@use "sass:meta";
@use "@sass-palette/helper";
@use "@sass-palette/${i(e)}palette";

$palette-variables: meta.module-variables("${i(e)}palette");
${a.env.isDebug?`
@debug "${e} config variables: #{meta.inspect(meta.module-variables("${i(e)}config"))}";
@debug "${e} palette variables: #{meta.inspect($palette-variables)}";
`:""}

@include helper.inject($palette-variables);
`),E=(a,{id:e,defaultPalette:s,generator:l,userPalette:r})=>a.writeTemp(`sass-palette/${i(e)}palette.scss`,`${s?`@import "file:///${f(s)}";`:""}
@import "file:///${f(r)}";
@import "file:///${f(l)}";
`),T=(a,e,s)=>s?a.writeTemp(`sass-palette/${i(e)}style.scss`,`@forward "file:///${f(s)}";
`):Promise.resolve(null),F=import.meta.dirname||C(import.meta.url),A=a=>e=>{e.env.isDebug&&v.info("Options:",a);const{id:s="",config:l=`.vuepress/styles/${i(s)}config.scss`,defaultConfig:r=D.resolve(F,"../../styles/default/config.scss"),palette:h=`.vuepress/styles/${i(s)}palette.scss`,defaultPalette:g,generator:$=x,style:d=""}=a,u=e.dir.source(l),p=e.dir.source(h),n=d?e.dir.source(d):null;return{name:k,multiple:!0,id:s,alias:{"@sass-palette/helper":D.resolve(F,"../../styles/helper.scss"),[`@sass-palette/${i(s)}config`]:e.dir.temp(`sass-palette/${i(s)}config.scss`),[`@sass-palette/${i(s)}inject`]:e.dir.temp(`sass-palette/${i(s)}inject.scss`),[`@sass-palette/${i(s)}palette`]:e.dir.temp(`sass-palette/${i(s)}palette.scss`),...d?{[`@sass-palette/${i(s)}style`]:e.dir.temp(`sass-palette/${i(s)}style.scss`)}:{}},extendsBundlerOptions:o=>{B(o,e,{css:{preprocessorOptions:{sass:{api:"modern",silenceDeprecations:["import"]},scss:{api:"modern",silenceDeprecations:["import"]}}}}),R(o,e,c=>{c.module.rule("scss").use("sass-loader").tap(t=>({...t,sassOptions:{...t.sassOptions,silenceDeprecations:["import",...t.sassOptions?.silenceDeprecations??[]]}}))}),_(o,e,s)},onInitialized:()=>Promise.all([S(e,s,r,u),G(e,s),E(e,{id:s,defaultPalette:g,generator:$,userPalette:p}),T(e,s,n)]).then(()=>{e.env.isDebug&&v.info(`Style file for ${s} generated`)}),onWatched:(o,c)=>{const t=w(u,{cwd:e.dir.source(),ignoreInitial:!0}),m=()=>S(e,s,r,u).then(()=>{e.env.isDebug&&v.info(`Style file for ${s} updated`)});t.on("add",()=>{m()}),t.on("unlink",()=>{m()}),c.push(t);const P=w(p,{cwd:e.dir.source(),ignoreInitial:!0}),O=()=>Promise.all([S(e,s,r,u),E(e,{id:s,defaultPalette:g,generator:$,userPalette:p})]).then(()=>{e.env.isDebug&&v.info(`Style file for ${s} updated`)});if(P.on("add",()=>{O()}),P.on("unlink",()=>{O()}),c.push(P),n){const y=w(n,{cwd:e.dir.source(),ignoreInitial:!0}),j=()=>T(e,s,n).then(()=>{e.env.isDebug&&v.info(`Style file for ${s} updated`)});y.on("add",()=>{j()}),y.on("unlink",()=>{j()}),c.push(y)}},clientConfigFile:()=>z(e,s)}},U=(a,e)=>{const{plugins:s}=a.pluginApi,l=s.filter(r=>r.name==="@vuepress/plugin-sass-palette").findIndex(r=>r.id===e);l!==-1&&s.splice(l,1)},Y=(a,e)=>{const{plugins:s}=a.pluginApi;s.filter(l=>l.name==="@vuepress/plugin-sass-palette").every(l=>l.id!==e.id)&&a.use(A(e))};export{U as removePalettePlugin,A as sassPalettePlugin,Y as useSassPalettePlugin};
//# sourceMappingURL=index.js.map
